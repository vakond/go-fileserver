// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fileserver.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	Version              string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_046915b8af788611, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type VersionsResponse struct {
	Version              []string `protobuf:"bytes,1,rep,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionsResponse) Reset()         { *m = VersionsResponse{} }
func (m *VersionsResponse) String() string { return proto.CompactTextString(m) }
func (*VersionsResponse) ProtoMessage()    {}
func (*VersionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_046915b8af788611, []int{1}
}

func (m *VersionsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionsResponse.Unmarshal(m, b)
}
func (m *VersionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionsResponse.Marshal(b, m, deterministic)
}
func (m *VersionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionsResponse.Merge(m, src)
}
func (m *VersionsResponse) XXX_Size() int {
	return xxx_messageInfo_VersionsResponse.Size(m)
}
func (m *VersionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VersionsResponse proto.InternalMessageInfo

func (m *VersionsResponse) GetVersion() []string {
	if m != nil {
		return m.Version
	}
	return nil
}

type DownloadResponse struct {
	Index                int64    `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Progress             float64  `protobuf:"fixed64,2,opt,name=progress,proto3" json:"progress,omitempty"`
	Contents             []byte   `protobuf:"bytes,3,opt,name=contents,proto3" json:"contents,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DownloadResponse) Reset()         { *m = DownloadResponse{} }
func (m *DownloadResponse) String() string { return proto.CompactTextString(m) }
func (*DownloadResponse) ProtoMessage()    {}
func (*DownloadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_046915b8af788611, []int{2}
}

func (m *DownloadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownloadResponse.Unmarshal(m, b)
}
func (m *DownloadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownloadResponse.Marshal(b, m, deterministic)
}
func (m *DownloadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadResponse.Merge(m, src)
}
func (m *DownloadResponse) XXX_Size() int {
	return xxx_messageInfo_DownloadResponse.Size(m)
}
func (m *DownloadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadResponse proto.InternalMessageInfo

func (m *DownloadResponse) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *DownloadResponse) GetProgress() float64 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *DownloadResponse) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "api.Request")
	proto.RegisterType((*VersionsResponse)(nil), "api.VersionsResponse")
	proto.RegisterType((*DownloadResponse)(nil), "api.DownloadResponse")
}

func init() {
	proto.RegisterFile("fileserver.proto", fileDescriptor_046915b8af788611)
}

var fileDescriptor_046915b8af788611 = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0x37, 0x06, 0xdd, 0x3a, 0xec, 0xa1, 0x04, 0x85, 0xd0, 0x53, 0x89, 0x97, 0x1e, 0xa4,
	0xa8, 0x7d, 0x05, 0xf1, 0x01, 0x72, 0xf0, 0x6c, 0xb5, 0xa3, 0x04, 0x4a, 0x26, 0x66, 0x62, 0xf5,
	0xf1, 0xc5, 0xd6, 0x06, 0x2d, 0x7b, 0xcb, 0x47, 0xfe, 0x19, 0xbe, 0x7f, 0xa0, 0x7c, 0x75, 0x23,
	0x32, 0xc6, 0x09, 0x63, 0x1b, 0x22, 0x25, 0x52, 0xb2, 0x0f, 0xce, 0x5c, 0xc1, 0xde, 0xe2, 0xfb,
	0x07, 0x72, 0x52, 0x1a, 0xf6, 0x13, 0x46, 0x76, 0xe4, 0xb5, 0xa8, 0x45, 0x73, 0x6e, 0x57, 0x34,
	0xd7, 0x50, 0x3e, 0x2e, 0x4f, 0xb6, 0xc8, 0x81, 0x3c, 0xe3, 0xff, 0xb4, 0xfc, 0x9b, 0x7e, 0x82,
	0xf2, 0x9e, 0x3e, 0xfd, 0x48, 0xfd, 0x90, 0xd3, 0x17, 0x70, 0xea, 0xfc, 0x80, 0x5f, 0xf3, 0x66,
	0x69, 0x17, 0x50, 0x15, 0x14, 0x21, 0xd2, 0x5b, 0x44, 0x66, 0x7d, 0x52, 0x8b, 0x46, 0xd8, 0xcc,
	0x3f, 0x7f, 0x2f, 0xe4, 0x13, 0xfa, 0xc4, 0x5a, 0xd6, 0xa2, 0x39, 0xd8, 0xcc, 0x77, 0x09, 0xe0,
	0x21, 0xb7, 0x51, 0xb7, 0x50, 0xac, 0x76, 0xea, 0xd0, 0xf6, 0xc1, 0xb5, 0xbf, 0x8d, 0xaa, 0xcb,
	0x99, 0xb6, 0xea, 0x66, 0xa7, 0x3a, 0x28, 0x56, 0xc5, 0xa3, 0x23, 0x5b, 0x7f, 0xb3, 0xbb, 0x11,
	0xcf, 0x67, 0xf3, 0xd9, 0xba, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x40, 0x66, 0x83, 0x4a,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FileserverClient is the client API for Fileserver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileserverClient interface {
	Versions(ctx context.Context, in *Request, opts ...grpc.CallOption) (*VersionsResponse, error)
	Download(ctx context.Context, in *Request, opts ...grpc.CallOption) (Fileserver_DownloadClient, error)
}

type fileserverClient struct {
	cc grpc.ClientConnInterface
}

func NewFileserverClient(cc grpc.ClientConnInterface) FileserverClient {
	return &fileserverClient{cc}
}

func (c *fileserverClient) Versions(ctx context.Context, in *Request, opts ...grpc.CallOption) (*VersionsResponse, error) {
	out := new(VersionsResponse)
	err := c.cc.Invoke(ctx, "/api.Fileserver/Versions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileserverClient) Download(ctx context.Context, in *Request, opts ...grpc.CallOption) (Fileserver_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Fileserver_serviceDesc.Streams[0], "/api.Fileserver/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileserverDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Fileserver_DownloadClient interface {
	Recv() (*DownloadResponse, error)
	grpc.ClientStream
}

type fileserverDownloadClient struct {
	grpc.ClientStream
}

func (x *fileserverDownloadClient) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileserverServer is the server API for Fileserver service.
type FileserverServer interface {
	Versions(context.Context, *Request) (*VersionsResponse, error)
	Download(*Request, Fileserver_DownloadServer) error
}

// UnimplementedFileserverServer can be embedded to have forward compatible implementations.
type UnimplementedFileserverServer struct {
}

func (*UnimplementedFileserverServer) Versions(ctx context.Context, req *Request) (*VersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Versions not implemented")
}
func (*UnimplementedFileserverServer) Download(req *Request, srv Fileserver_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}

func RegisterFileserverServer(s *grpc.Server, srv FileserverServer) {
	s.RegisterService(&_Fileserver_serviceDesc, srv)
}

func _Fileserver_Versions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileserverServer).Versions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Fileserver/Versions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileserverServer).Versions(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fileserver_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileserverServer).Download(m, &fileserverDownloadServer{stream})
}

type Fileserver_DownloadServer interface {
	Send(*DownloadResponse) error
	grpc.ServerStream
}

type fileserverDownloadServer struct {
	grpc.ServerStream
}

func (x *fileserverDownloadServer) Send(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Fileserver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Fileserver",
	HandlerType: (*FileserverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Versions",
			Handler:    _Fileserver_Versions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Download",
			Handler:       _Fileserver_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fileserver.proto",
}
